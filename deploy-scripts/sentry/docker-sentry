#!/bin/bash
#
# Sentry Docker Setup Script (https://hub.docker.com/_/sentry/)
#

# only for local deployments!
# script doesn't take any arguments

# == MODIFY THOSE VARIABLES

# network namespace
DOCKER_NETWORK=docker1

# container names
SENTRY_NAME="sentry"
REDIS_NAME="sentry-redis"
POSTGRESQL_NAME="sentry-postgres"
CRON_NAME="sentry-cron"
WORKER_NAME="sentry-worker"

# volume names
VOLUME_SENTRY="/docker/volumes/sentry/data"
VOLUME_REDIS="/docker/volumes/sentry/redis"
VOLUME_POSTGRESQL="/docker/volumes/sentry/database"
VOLUME_CRON="/docker/volumes/sentry/cron"
VOLUME_WORKER="/docker/volumes/sentry/worker"

# static ip addresses
_SUBNET="172.18.1"
REDIS_IP="$_SUBNET.36"
POSTGRESQL_IP="$_SUBNET.37"
SENTRY_IP="$_SUBNET.40"
SENTRY_CRON_IP="$_SUBNET.200"
SENTRY_WORKER_IP="$_SUBNET.201"

# database credentials
POSTGRESQL_USER=sentry
POSTGRESQL_PASSWORD=sentry

# sentry shared secret key
# > docker run --rm --net "$DOCKER_NETWORK" sentry config generate-secret-key
SENTRY_SECRET_KEY="sentry_2937492375927359237492374923492984723947923659237492349"


# == START OF MAIN SCRIPT

# Redis
echo "===> Docker: Redis"
docker run -d --net "$DOCKER_NETWORK" --ip "$REDIS_IP" \
    --name "$REDIS_NAME" \
    -v "$VOLUME_REDIS":/data \
    redis:alpine

# PostgreSQL
echo "===> Docker: PostgreSQL"
docker run -d --net "$DOCKER_NETWORK" --ip "$POSTGRESQL_IP" \
    --name "$POSTGRESQL_NAME" \
    -v "$VOLUME_POSTGRESQL":/var/lib/postgresql/data \
    -e POSTGRES_PASSWORD="$POSTGRESQL_PASSWORD" \
    -e POSTGRES_USER="$POSTGRESQL_USER" \
    postgres:alpine

# Upgrade Sentry database
function sentry_create_database() {
    echo "===> Sentry: Upgrading Sentry database"
    docker run -it --rm --net "$DOCKER_NETWORK" \
        -v "$VOLUME_SENTRY":/var/lib/sentry/files \
        -e SENTRY_SECRET_KEY="$SENTRY_SECRET_KEY" \
        -e SENTRY_REDIS_HOST="$REDIS_IP" \
        -e SENTRY_POSTGRES_HOST="$POSTGRESQL_IP" \
        -e SENTRY_DB_USER="$POSTGRESQL_USER" \
        -e SENTRY_DB_PASSWORD="$POSTGRESQL_PASSWORD" \
        sentry:latest upgrade
}

# Create new user
function sentry_create_user() {
    echo "===> Sentry: Creating new Sentry user"
    docker run -it --rm --net "$DOCKER_NETWORK" \
        -v "$VOLUME_SENTRY":/var/lib/sentry/files \
        -e SENTRY_SECRET_KEY="$SENTRY_SECRET_KEY" \
        -e SENTRY_REDIS_HOST="$REDIS_IP" \
        -e SENTRY_POSTGRES_HOST="$POSTGRESQL_IP" \
        -e SENTRY_DB_USER="$POSTGRESQL_USER" \
        -e SENTRY_DB_PASSWORD="$POSTGRESQL_PASSWORD" \
        sentry:latest createuser
}

# Sentry main container
echo "===> Docker: Sentry"
docker run -d --net "$DOCKER_NETWORK" --ip "$SENTRY_IP" \
    --name "$SENTRY_NAME" \
    -v "$VOLUME_SENTRY":/var/lib/sentry/files \
    -e SENTRY_SECRET_KEY="$SENTRY_SECRET_KEY" \
    -e SENTRY_WEB_HOST=0.0.0.0 \
    -e SENTRY_WEB_PORT=9000 \
    -e SENTRY_REDIS_HOST="$REDIS_IP" \
    -e SENTRY_POSTGRES_HOST="$POSTGRESQL_IP" \
    -e SENTRY_DB_USER=$POSTGRESQL_USER \
    -e SENTRY_DB_PASSWORD="$POSTGRESQL_PASSWORD" \
    sentry:latest

# Sentry cron job handler
echo "===> Docker: Sentry cron job handler"
docker run -d --net "$DOCKER_NETWORK" --ip "$SENTRY_CRON_IP" \
    --name "$CRON_NAME" \
    -v "$VOLUME_CRON":/var/lib/sentry/files \
    -e SENTRY_SECRET_KEY="$SENTRY_SECRET_KEY" \
    -e SENTRY_REDIS_HOST="$REDIS_IP" \
    -e SENTRY_POSTGRES_HOST="$POSTGRESQL_IP" \
    -e SENTRY_DB_USER=$POSTGRESQL_USER \
    -e SENTRY_DB_PASSWORD="$POSTGRESQL_PASSWORD" \
    sentry:latest run cron

# Sentry Worker
echo "===> Docker: Sentry worker"
docker run -d --net "$DOCKER_NETWORK" --ip "$SENTRY_WORKER_IP" \
    --name "$WORKER_NAME" \
    -v "$VOLUME_WORKER":/var/lib/sentry/files \
    -e SENTRY_SECRET_KEY="$SENTRY_SECRET_KEY" \
    -e SENTRY_REDIS_HOST="$REDIS_IP" \
    -e SENTRY_POSTGRES_HOST="$POSTGRESQL_IP" \
    -e SENTRY_DB_USER=$POSTGRESQL_USER \
    -e SENTRY_DB_PASSWORD="$POSTGRESQL_PASSWORD" \
    sentry:latest run worker

echo "===> Done!"
